<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zblog2020.github.io/</id>
    <title>Gridea</title>
    <updated>2019-12-28T14:04:54.807Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zblog2020.github.io/"/>
    <link rel="self" href="https://zblog2020.github.io//atom.xml"/>
    <subtitle>学习分享</subtitle>
    <logo>https://zblog2020.github.io//images/avatar.png</logo>
    <icon>https://zblog2020.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[ Maven相关知识复习]]></title>
        <id>https://zblog2020.github.io//post/maven-xiang-guan-zhi-shi-fu-xi</id>
        <link href="https://zblog2020.github.io//post/maven-xiang-guan-zhi-shi-fu-xi">
        </link>
        <updated>2019-12-27T14:10:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-为什么使用maven">一、为什么使用maven</h2>
<h6 id="11-统一管理本地第三方jar包">1.1、统一管理本地第三方jar包</h6>
<p>在开发java项目过程中，会使用大量的第三方工具，导致jar很难统一管理，再加上团队开发时，不仅需要统一项目源码，也需要统一jar环境，由于本地机器，多个项目，使用的jar包环境大体一致，为了避免环境重复，使用maven进行统一的管理，多个项目引用maven仓库的jar包</p>
<h6 id="12-处理jar包的依赖关系">1.2、处理jar包的依赖关系</h6>
<p>由于项目开发中，各个jar包之间，有相互的依赖管理，为了减轻程序员压力，可以用maven处理jar包的依赖</p>
<h6 id="13-处理jar包的依赖冲突">1.3、处理jar包的依赖冲突</h6>
<p>如果开发过程中，多个项目存在依赖关系，这几个项目中的jar包可能会重复，产生依赖冲突</p>
<p><strong>maven有两个原则:</strong></p>
<ul>
<li>最短路径原则（当有多个项目产生依赖时，maven会优先调用距离最近的项目jar包）</li>
<li>先声明者优先原则（当多个项目依赖时，路径相同时，会调用配置文件中先声明的jar包）</li>
</ul>
<h6 id="14-获取第三方jar包">1.4、获取第三方jar包</h6>
<p>maven可以联网远程从中央仓库下载程序员需要的jar包，工具版本在配置文件中声明即可，避免程序员自己寻找jar，安全省时</p>
<h6 id="15-将项目拆分成多个模块使用maven管理">1.5、将项目拆分成多个模块（使用maven管理）</h6>
<p>垂直拆分，按业务维度，划分模块，不同模块使用maven管理</p>
<p>水平拆分，将项目分为前端层，组件层（dao、service、controller），公共层等分为不同的模块</p>
<h6 id="16-实现项目的分布式可将多个模块分布式部署">1.6、实现项目的分布式，可将多个模块分布式部署</h6>
<p>当项目巨大时，分为多个模块，部署在多个服务器上，也需使用maven</p>
<h2 id="二-maven是什么">二、maven是什么</h2>
<p>maven是一个自动化构建工具，主要用户项目构建和依赖管理</p>
<p>一个项目的构成有：</p>
<ol>
<li>纯java代码（需要将.java文件编译成.class文件）</li>
<li>web工程（需要将项目程序的编译后的文件，拿到服务器上，这个过程我们称之为“部署”）</li>
<li>web项目部署在tomcat服务器中的结构位置（部署环境需要了解）</li>
</ol>
<figure data-type="image" tabindex="1"><img src="C:%5CUsers%5Cdell%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1577451933913.png" alt="1577451933913"></figure>
<p>部署时，会在WebContext目录下保存.class文件，并放入服务器下的指定文件夹下</p>
<p>maven工作流程:</p>
<p>①清理：删除以前编译的字节码文件，为重现编译做准备</p>
<p>②编译：将java代码编译成字节码文件</p>
<p>③测试：针对项目的关键点测试，确保项目在迭代开发过程中关键点的正确</p>
<p>④报告：标准格式展示测试结果</p>
<p>⑤打包：java工程打包成jar包，web工程打包成war包</p>
<p>⑥安装：将打包好的jar包或war包安装到本地仓库中</p>
<h2 id="三-maven九点概念">三、Maven九点概念</h2>
<p>①POM</p>
<p>②约定的目录结构</p>
<p>③坐标</p>
<p>④依赖管理</p>
<p>⑤仓库管理</p>
<p>⑥生命周期</p>
<p>⑦插件和目标</p>
<p>⑧继承</p>
<p>⑨聚合</p>
<h2 id="四-maven的安装和设置简述">四、Maven的安装和设置（简述）</h2>
<p>①检查java_HOME环境变量</p>
<p>②解压Maven的核心程序</p>
<p>③配置环境变量</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring框架的入门了解]]></title>
        <id>https://zblog2020.github.io//post/spring-kuang-jia-de-ru-men-liao-jie</id>
        <link href="https://zblog2020.github.io//post/spring-kuang-jia-de-ru-men-liao-jie">
        </link>
        <updated>2019-12-25T12:54:02.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-背景了解">一、背景了解</h2>
<p>随着java语言的不断发展和壮大，java语言诞生了很多服务和技术，随着软件结构的日益庞大，程序员需要更好的分工合作，模块化渐渐的成为了一种需求，spring的出现简化了繁琐配置和复杂代码的开发，使得工程师么，可以更加专注的进行业务上的工作，省去了技术整合的时间。</p>
<h4 id="特点">特点：</h4>
<ol>
<li>非侵入式</li>
<li>依赖注入（Ioc/DI）</li>
<li>面向切面编程（Aop）</li>
<li>容器</li>
<li>组件化</li>
<li>一站式服务</li>
</ol>
<h2 id="二-spring框架的几点概念">二、spring框架的几点概念：</h2>
<h3 id="1非侵入式">(1)非侵入式：</h3>
<p>非侵入式指的是代码对框架本身的依赖性较小，表现为用户代码并不依赖框架本身，用户代码使用框架中的类时，不需要继承框架中的类，spring就像是个容器一样，是将用户代码进行组装。</p>
<h3 id="2依赖注入iocdi">(2)依赖注入(Ioc/DI)：</h3>
<p>依赖注入(控制反转)：</p>
<ul>
<li>
<p>在javaSE阶段中，复杂功能，或者复杂代码的实现，本质是由一个一个类的实例对象组成，在se阶段中，获取对象的过程为，当前代码中需要依赖某个对象时，随即创建一个新的对象，最常见的依赖方式就是，将一个类作为参数调用，当前类执行的时候，因为存在依赖关系，便会执行传递的那个类，而随着应用系统的日益庞大，这种依赖关系，代码耦合度太高，已经不适合目前的开发</p>
<p>所以需要降低耦合度</p>
</li>
<li>
<p>控制反转：控制反转则是从另一个角度阐释了依赖注入，se阶段我们由代码中的主动去new对象可理解为主动控制，而控制反转则是将主动由被动，Ioc容器主动注入，等待程序员使用，使每个对象由Ioc容器控制，控制每个类之间的依赖关系，类似于生活中的拼装的概念，每个类都像一个零件一样，程序员只需要一个一个拼起来，注入到使用的类中，就构成了复杂的系统，管理每个类的事情交给了Ioc容器去做</p>
<h4 id="spring依赖注入实现的原因">Spring依赖注入实现的原因：</h4>
<p>spring使用了asm框架，asm框架可以读取java字节码文件，得到类中的构造器和属性，所以spring可以正常工作 ，asm框架在spring-core核心包中（附带执行代码图！！！！！！）</p>
<h3 id="3面向切面编程aop">(3)面向切面编程（AOP）</h3>
<p>在面向切面的思想里，将代码划分为两种&quot;业务(核心)代码&quot;和“周边代码”,业务代码主要指的是(增，删，改，查)等业务功能，周边代码主要是指&quot;日志&quot;,&quot;性能统计&quot;,&quot;事务管理&quot;,&quot;过滤器&quot;,&quot;拦截器&quot;等。</p>
<h3 id="4ioc的实现">(4)IOC的实现：</h3>
<p>XML方式：</p>
<p>1、创建Ioc容器，两种实现方式:（1）BeanFactory:面向spring内部，不提供给开发人员使用</p>
<pre><code>  					    （2）ApplicationContext:BeanFactory的子接口，面向开发人员，几乎所有场合都使用ApplicationContext创建Ioc容器。
</code></pre>
<p>ApplicationContext中（附带spring容器的结构图）</p>
<p>两个常用实现类：classPathXmlApplicationContext(对应类文件下XML配置文件径)</p>
<p>​			     FileSystemXmlApplicationContext（对应文件工程下的XML配置文件路径)(生产环境)</p>
<p>一个常用子接口：ConfigurableApplicationContext</p>
<p>添加了扩展功能refresh(),close()，具有开启，关闭，刷新上下文的功能</p>
<p>WebApplicationContext：(对应web路径下的初始化)</p>
<h4 id="实现过程">实现过程：</h4>
<h6 id="1在main方法中创建applicationcontext对象">1.在main方法中创建ApplicationContext对象</h6>
<pre><code class="language-java">ApplicationContext context=new classPathXmlApplicationContext(&quot;**.xml&quot;)
</code></pre>
<h6 id="2获取对象">2.获取对象</h6>
<p>(1)getBean()方法通过id获取单个对象（此方法多次重载，可通过多种方式获取Bean）</p>
<p>​			通过.class类型获取多个对象</p>
<p>​			通过类型+类型获取对象（常用）</p>
<h6 id="赋值方式">赋值方式</h6>
<p>将类通过<bean>标签放入Ioc容器中，设置id(在容器的唯一名字)，class（全类名）</p>
<p>3.1、通过bean的setxxx()方法赋值</p>
<p>property标签设置类的属性，设置name(类中Set方法后的名字)，value(该属性的值)</p>
<p>3.2、通过bean的构造器赋值</p>
<p>constructor-age标签设置构造器，设置name（按照名字传值），value(所赋的值)</p>
<p>//如果value值中，存在特殊符号，则用<![CDATA[]]]]><![CDATA[>包裹，并改成<value>标签</p>
<p>设置index(按照参数的顺序赋值)</p>
<p>自动配置合适的构造器（顺序匹配构造器赋值）</p>
<p>设置type(指定属性类型)</p>
</li>
</ul>
]]></content>
    </entry>
</feed>